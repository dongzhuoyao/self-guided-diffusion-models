name: in64
num_classes: 1000
image_size: 64
channels: 3
fid_every_n_epoch: 1
vis_every_iter: 6000
h5_file: null
stego_dir: null #only used in voc,coco
stego_k: -1 #only used in voc,coco

root_global: ${data_root}
fid_train_image_dir: ${data_root}/sg_fid_eval/in64v2_train_50k
fid_val_image_dir: ${data_root}/sg_fid_eval/in64v2_val_50k
fid_debug_dir: ${data_root}/sg_fid_eval/in32_4debug

val_fid_num: 10000
test_fid_num: 10000
  #1000step, size32,10k images on das6: 4hour
root: ${data_root}/imagenet_small
lr: 1e-4
wd: 0.01

trainer:
  limit_train_batches: 1.0
  limit_val_batches: 500
  check_val_every_n_epoch: 1
  max_epochs: 20

  


target: pl_datamodule.dm.DataModuleFromConfig
params:
  batch_size: 32 # set at top-level for convenience
  num_workers: 5
  pin_memory: True
  wrap: False
  train:
    target: dataset.imagenet_pickle.ImageNet_Pickle
    params:
      root: ${data.root}
      root_global: ${data.root_global}
      train: true
      h5_file: ${data.h5_file}
      image_size: ${data.image_size}
      condition_method: ${sg.params.condition_method}
      condition: ${condition}
      debug: ${debug}

  validation:
    target: dataset.imagenet_pickle.ImageNet_Pickle
    params:
      root: ${data.root}
      root_global: ${data.root_global}
      train: false
      h5_file: ${data.h5_file}
      image_size: ${data.image_size}
      condition_method: ${sg.params.condition_method}
      condition: ${condition}
      debug: ${debug}

  test:
    target: dataset.imagenet_pickle.ImageNet_Pickle
    params:
      root: ${data.root}
      root_global: ${data.root_global}
      train: false
      h5_file: ${data.h5_file}
      image_size: ${data.image_size}
      condition_method: ${sg.params.condition_method}
      condition: ${condition}
      debug: ${debug}
  crossds:
    target: dataset.imagenet_pickle.ImageNet_Pickle
    params:
      root: ${data.root}
      root_global: ${data.root_global}
      train: false
      h5_file: ${data.h5_file}
      image_size: ${data.image_size}
      condition_method: ${sg.params.condition_method}
      condition: ${condition}
      debug: ${debug}
